////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработка результата выполнения.

// Формирует шаблон результата выполнения.
//
// Возвращаемое значение: 
//   Результат - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//
Функция НовыйРезультатВыполнения(Результат = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Результат.Вставить("ВыводОповещения",     Новый Структура("Использование, Заголовок, Ссылка, Текст, Картинка", Ложь));
	Результат.Вставить("ВыводСообщения",      Новый Структура("Использование, Текст, ПутьКРеквизитуФормы", Ложь));
	Результат.Вставить("ВыводПредупреждения", Новый Структура("Использование, Заголовок, Текст, ПутьКРеквизитуФормы, ТекстОшибок", Ложь));
	Результат.Вставить("ОповещениеФорм",                Новый Структура("Использование, ИмяСобытия, Параметр, Источник", Ложь));
	Результат.Вставить("ОповещениеДинамическихСписков", Новый Структура("Использование, СсылкаИлиТип", Ложь));
	
	Возврат Результат;
КонецФункции

// Добавляет в структуру информацию о типах, которые необходимо обновить в динамических списках.
//   Действие выполняется на клиенте после вызова СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   ИзмененныеОбъекты - Массив - Ссылки измененных объектов.
//
Процедура ОповеститьДинамическиеСписки(Результат, ИзмененныеОбъекты) Экспорт
	Если ТипЗнч(ИзмененныеОбъекты) <> Тип("Массив") Или ИзмененныеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("ОповещениеДинамическихСписков") Тогда
		Результат.Вставить("ОповещениеДинамическихСписков", Новый Структура("Использование, СсылкаИлиТип", Ложь));
	КонецЕсли;
	Оповещение = Результат.ОповещениеДинамическихСписков;
	Оповещение.Использование = Истина;
	
	Значение = Оповещение.СсылкаИлиТип;
	ЗначениеЗаполнено = ЗначениеЗаполнено(Значение);
	
	Если ИзмененныеОбъекты.Количество() = 1 И НЕ ЗначениеЗаполнено Тогда
		Оповещение.СсылкаИлиТип = ИзмененныеОбъекты[0];
	Иначе
		// Преобразование оповещения в массив.
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения <> Тип("Массив") Тогда
			Оповещение.СсылкаИлиТип = Новый Массив;
			Если ЗначениеЗаполнено Тогда
				Оповещение.СсылкаИлиТип.Добавить(?(ТипЗначения = Тип("Тип"), Значение, ТипЗначения));
			КонецЕсли;
		КонецЕсли;
		
		// Добавление типов измененных объектов.
		Для Каждого ИзмененныйОбъект Из ИзмененныеОбъекты Цикл
			ТипИзмененногоОбъекта = ТипЗнч(ИзмененныйОбъект);
			Если Оповещение.СсылкаИлиТип.Найти(ТипИзмененногоОбъекта) = Неопределено Тогда
				Оповещение.СсылкаИлиТип.Добавить(ТипИзмененногоОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Добавляет в структуру информацию о событии, о котором надо оповестить все открытые формы.
//   Действие выполняется на клиенте после вызова СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат  - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   ИмяСобытия - Строка - Имя события, которое используется для первичной идентификации сообщений принимающими формами.
//   Параметр   - Произвольный - Набор данных, которые используются принимающей формой для обновления состава.
//   Источник   - Произвольный - Источник оповещения, например форма-источником.
//
Процедура РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат, ИмяСобытия, Параметр = Неопределено, Источник = Неопределено) Экспорт
	Если Не Результат.Свойство("ОповещениеФорм") Тогда
		Результат.Вставить("ОповещениеФорм", Новый Массив);
	ИначеЕсли ТипЗнч(Результат.ОповещениеФорм) = Тип("Структура") Тогда // Структуру в массив структур.
		ОповещениеФорм = Результат.ОповещениеФорм;
		Результат.ОповещениеФорм = Новый Массив;
		Результат.ОповещениеФорм.Добавить(ОповещениеФорм);
	КонецЕсли;
	ОповещениеФорм = Новый Структура("Использование, ИмяСобытия, Параметр, Источник", Истина, ИмяСобытия, Параметр, Источник);
	Результат.ОповещениеФорм.Добавить(ОповещениеФорм);
КонецПроцедуры

// Добавляет в структуру информацию об узлах дерева, которые необходимо "развернуть".
//   Действие выполняется на клиенте после вызова СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   ИмяТаблицы - Строка - Имя таблицы формы (дерева значений), в которой требуется развернуть узел.
//   Идентификатор - Произвольный - Необязательный. Идентификатор строки дерева, которую требуется развернуть.
//       Если указано "*", то будут развернуты все узлы верхнего уровня.
//       Если указано Неопределено, то строки дерева развернуты не будут.
//       Значение по умолчанию: "*".
//   СПодчиненными - Булево - Необязательный. Раскрывать ли подчиненные узлы.
//       Значение по умолчанию: Ложь (не раскрывать подчиненные узлы).
//
Процедура РазвернутьУзлыДерева(Результат, ИмяТаблицы, Идентификатор = "*", СПодчиненными = Ложь) Экспорт
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("РазворачиваемыеУзлы") Тогда
		Результат.Вставить("РазворачиваемыеУзлы", Новый Массив);
	КонецЕсли;
	
	РазворачиваемыйУзел = Новый Структура("ИмяТаблицы, Идентификатор, СПодчиненными");
	РазворачиваемыйУзел.ИмяТаблицы = ИмяТаблицы;
	РазворачиваемыйУзел.Идентификатор = Идентификатор;
	РазворачиваемыйУзел.СПодчиненными = СПодчиненными;
	
	Результат.РазворачиваемыеУзлы.Добавить(РазворачиваемыйУзел);
КонецПроцедуры

// Добавляет в структуру информацию, необходимую для вывода предупреждения или текста ошибки.
//   Действие выполняется на клиенте после вызова СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   Текст               - Строка - Текст предупреждения.
//   ТекстОшибок         - Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//   Заголовок           - Строка - Необязательный. Заголовок окна.
//   ПутьКРеквизитуФормы - Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//
Процедура ВывестиПредупреждение(Результат, Текст, ТекстОшибок = "", Заголовок = "", ПутьКРеквизитуФормы = "") Экспорт
	ВыводПредупреждения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ВыводПредупреждения");
	Если ВыводПредупреждения = Неопределено Тогда
		ВыводПредупреждения = Новый Структура("Использование, Заголовок, Текст, ПутьКРеквизитуФормы, ТекстОшибок", Ложь);
		Результат.Вставить("ВыводПредупреждения", ВыводПредупреждения);
	КонецЕсли;
	ВыводПредупреждения.Использование = Истина;
	ВыводПредупреждения.Заголовок = Заголовок;
	ВыводПредупреждения.Текст = Текст;
	ВыводПредупреждения.ТекстОшибок = ТекстОшибок;
	ВыводПредупреждения.ПутьКРеквизитуФормы = ПутьКРеквизитуФормы;
КонецПроцедуры

// Добавляет в структуру информацию, необходимую для вывода сообщения о неверно заполненных полях формы.
//   Действие выполняется на клиенте после вызова СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   Текст               - Строка - Текст сообщения.
//   ПутьКРеквизитуФормы - Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//
Процедура ВывестиСообщение(Результат, Текст, ПутьКРеквизитуФормы = "") Экспорт
	ВыводСообщения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ВыводСообщения");
	Если ВыводСообщения = Неопределено Тогда
		ВыводСообщения = Новый Структура("Использование, Текст, ПутьКРеквизитуФормы", Ложь);
		Результат.Вставить("ВыводСообщения", ВыводСообщения);
	КонецЕсли;
	ВыводСообщения.Использование = Истина;
	ВыводСообщения.Текст = Текст;
	ВыводСообщения.ПутьКРеквизитуФормы = ПутьКРеквизитуФормы;
КонецПроцедуры

// Добавляет в структуру информацию, необходимую для вывода всплывающего оповещения.
//   Действие выполняется на клиенте после вызова СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат - Структура - См. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   Заголовок - Строка    - Заголовок оповещения.
//   Текст     - Строка    - Текст оповещения.
//   Ссылка    - Строка    - Навигационная ссылка для перехода к объекту конфигурации.
//   Картинка  - Картинка  - Картинка оповещения.
//
Процедура ВывестиОповещение(Результат, Заголовок, Текст = "", Картинка = Неопределено, Ссылка = "") Экспорт
	ВыводОповещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ВыводОповещения");
	Если ВыводОповещения = Неопределено Тогда
		ВыводОповещения = Новый Структура("Использование, Заголовок, Ссылка, Текст, Картинка", Ложь);
		Результат.Вставить("ВыводОповещения", ВыводОповещения);
	КонецЕсли;
	ВыводОповещения.Использование = Истина;
	ВыводОповещения.Заголовок     = Заголовок;
	ВыводОповещения.Ссылка        = Ссылка;
	ВыводОповещения.Текст         = Текст;
	ВыводОповещения.Картинка      = Картинка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

// Вычисляет сумму выделенных ячеек и возвращает ее представление.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Таблица, для которой вычисляет сумма ячеек.
//   ВыделенныеОбласти
//       - Неопределено - При вызове с клиента этот параметр будет определен автоматически.
//       - Массив - При вызове с сервера в этот параметр следует передавать области,
//           предварительно вычисленные на клиенте
//           при помощи функции ОтчетыКлиент.ВыделенныеОбласти(ТабличныйДокумент).
//
// Возвращаемое значение: 
//   Строка - Представление суммы выделенных ячеек.
//
// См. также:
//   ОтчетыКлиент.ВыделенныеОбласти().
//
Функция СуммаЯчеек(ТабличныйДокумент, ВыделенныеОбласти) Экспорт
	
	Если ВыделенныеОбласти = Неопределено Тогда
		#Если Клиент Тогда
			ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
		#Иначе
			Возврат НСтр("ru = 'Не указано значение параметра ""ВыделенныеОбласти"".'");
		#КонецЕсли
	КонецЕсли;
	
	#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат ""; // Нет ни одного числа.
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат "<"; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = Неопределено;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат "<"; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки
						И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Число = Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Число = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Ячейка.Текст);
					Иначе
						Продолжить;
					КонецЕсли;
					Если ТипЗнч(Число) = Тип("Число") Тогда
						Если Сумма = Неопределено Тогда
							Сумма = Число;
						Иначе
							Сумма = Сумма + Число;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Сумма = Неопределено Тогда
		Возврат ""; // Нет ни одного числа.
	КонецЕсли;
	
	Возврат Формат(Сумма, "ЧН=0");
	
КонецФункции

#КонецОбласти

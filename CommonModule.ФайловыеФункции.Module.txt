////////////////////////////////////////////////////////////////////////////////
// Подсистема "Файловые функции".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает максимальный размер файла.
//
// Возвращаемое значение:
//  Число - целое число байт.
//
Функция МаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Если МаксимальныйРазмерФайла = Неопределено
	 ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		МаксимальныйРазмерФайлаОбластиДанных =
			Константы.МаксимальныйРазмерФайлаОбластиДанных.Получить();
		
		Если МаксимальныйРазмерФайлаОбластиДанных = Неопределено
		 ИЛИ МаксимальныйРазмерФайлаОбластиДанных = 0 Тогда
			
			МаксимальныйРазмерФайлаОбластиДанных = 50*1024*1024; // 50 мб
			
			Константы.МаксимальныйРазмерФайлаОбластиДанных.Установить(
				МаксимальныйРазмерФайлаОбластиДанных);
		КонецЕсли;
		
		МаксимальныйРазмерФайла = Мин(МаксимальныйРазмерФайла, МаксимальныйРазмерФайлаОбластиДанных);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает максимальный размер файла провайдера.
//
// Возвращаемое значение:
//  Число - целое число байт.
//
Функция МаксимальныйРазмерФайлаОбщий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Если МаксимальныйРазмерФайла = Неопределено
	 ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с томами файлов

// Есть ли хоть один том хранения файлов.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда существует хотя бы один работающий том.
//
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
	|ГДЕ
	|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет общие параметры работы пользователей при изменении конфигурации.
// 
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьОбщиеПараметры(ЕстьИзменения = Неопределено, ТолькоПроверка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоПроверка ИЛИ МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	НедоступныеРолиПоТипамПользователей = НедоступныеРолиПоТипамПользователей();
	
	ВсеРоли = ВсеРоли();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыРаботыПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = СтандартныеПодсистемыСервер.ПараметрыРаботыПрограммы(
			"ПараметрыРаботыПользователей");
		
		// Проверка и обновление параметра НедоступныеРолиПоТипамПользователей.
		Сохраненные = Неопределено;
		
		Если Параметры.Свойство("НедоступныеРолиПоТипамПользователей") Тогда
			Сохраненные = Параметры.НедоступныеРолиПоТипамПользователей;
			
			Если НЕ ОбщегоНазначения.ДанныеСовпадают(
			          НедоступныеРолиПоТипамПользователей, Сохраненные) Тогда
				
				Сохраненные = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Сохраненные = Неопределено Тогда
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыПрограммы(
				"ПараметрыРаботыПользователей",
				"НедоступныеРолиПоТипамПользователей",
				НедоступныеРолиПоТипамПользователей);
		КонецЕсли;
		
		СтандартныеПодсистемыСервер.ПодтвердитьОбновлениеПараметраРаботыПрограммы(
			"ПараметрыРаботыПользователей", "НедоступныеРолиПоТипамПользователей");
		
		Если НЕ ТолькоПроверка Тогда
			СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
				"ПараметрыРаботыПользователей",
				"НедоступныеРолиПоТипамПользователей",
				?(Сохраненные = Неопределено,
				  Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина),
				  Новый ФиксированнаяСтруктура()) );
		КонецЕсли;
		
		// Проверка и обновление параметра ВсеРоли.
		Сохраненные = Неопределено;
		
		Если Параметры.Свойство("ВсеРоли") Тогда
			Сохраненные = Параметры.ВсеРоли;
			
			Если НЕ ОбщегоНазначения.ДанныеСовпадают(ВсеРоли, Сохраненные) Тогда
				Сохраненные = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Сохраненные = Неопределено Тогда
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыПрограммы(
				"ПараметрыРаботыПользователей",
				"ВсеРоли",
				ВсеРоли);
		КонецЕсли;
		
		СтандартныеПодсистемыСервер.ПодтвердитьОбновлениеПараметраРаботыПрограммы(
			"ПараметрыРаботыПользователей", "ВсеРоли");
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НедоступныеРолиПоТипамПользователей()
	
	НедоступныеПрава                         = НедоступныеПраваПоТипамПользователей();
	РазрешеноИзменениеОбщихДанных            = РазрешеноИзменениеОбщихДанных();
	НеразделенныеДанныеДоступныеДляИзменения = НеразделенныеДанныеДоступныеДляИзменения();
	
	НедоступныеРолиПоТипамПользователей = Новый Соответствие;
	
	Для каждого ТипПользователей Из Перечисления.ТипыПользователей Цикл
		НедоступныеРоли = Новый Соответствие;
		
		Для каждого Роль Из Метаданные.Роли Цикл
			ИмяРоли = Роль.Имя;
			Итог = Новый Структура;
			НайденныеНедоступныеПрава = Новый Массив;
			Если НедоступныеПрава[ТипПользователей] <> Неопределено Тогда
				Для каждого ЭлементСписка Из НедоступныеПрава[ТипПользователей] Цикл
					Если ПравоДоступа(ЭлементСписка.Значение, Метаданные, Роль) Тогда
						НайденныеНедоступныеПрава.Добавить(ЭлементСписка.Представление);
					КонецЕсли;
				КонецЦикла;
				Если НайденныеНедоступныеПрава.Количество() > 0 Тогда
					Итог.Вставить("Права", НайденныеНедоступныеПрава);
				КонецЕсли;
			КонецЕсли;
			
			Если РазрешеноИзменениеОбщихДанных[ТипПользователей] <> Истина Тогда
				Отбор = Новый Структура("Роль", ИмяРоли);
				НайденныеСтроки = НеразделенныеДанныеДоступныеДляИзменения.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ИзменяемыеНеразделенныеДанные =
						НеразделенныеДанныеДоступныеДляИзменения.Скопировать(
							НайденныеСтроки, "Объект, Право");
					
					ИзменяемыеНеразделенныеДанные.Свернуть("Объект, Право");
					Итог.Вставить("ИзменяемыеНеразделенныеДанные", ИзменяемыеНеразделенныеДанные);
				КонецЕсли;
			КонецЕсли;
			
			Если Итог.Количество() > 0 Тогда
				НедоступныеРоли.Вставить(ИмяРоли, Итог);
			КонецЕсли;
		КонецЦикла;
		
		НедоступныеРолиПоТипамПользователей.Вставить(ТипПользователей, НедоступныеРоли);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(НедоступныеРолиПоТипамПользователей, Ложь);
	
КонецФункции

// Возвращает таблицу полных имен неразделенных объектов метаданных и
// соответствующих им наборов прав доступа.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками: 
//   * Роль   - Строка - Имя роли.
//   * Объект - Строка - Полное имя объекта метаданных.
//   * Право  - Строка - Имя права доступа.
//
Функция НеразделенныеДанныеДоступныеДляИзменения() Экспорт
	
	ОбщаяТаблица = Новый ТаблицаЗначений;
	ОбщаяТаблица.Колонки.Добавить("Роль",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ОбщаяТаблица.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ОбщаяТаблица.Колонки.Добавить("Право",  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса") Тогда
		Возврат ОбщаяТаблица;
	КонецЕсли;
	
	ВидыМетаданных = Новый Массив;
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыОбмена, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Константы, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Справочники, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Последовательности, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Документы, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыВидовХарактеристик, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыСчетов, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыВидовРасчета, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.БизнесПроцессы, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Задачи, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыСведений, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыНакопления, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыБухгалтерии, Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыРасчета, Ложь));
	
	ПроверяемыеПрава = Новый Массив;
	ПроверяемыеПрава.Добавить(Новый Структура("Имя, Ссылочное", "Изменение",  Ложь));
	ПроверяемыеПрава.Добавить(Новый Структура("Имя, Ссылочное", "Добавление", Истина));
	ПроверяемыеПрава.Добавить(Новый Структура("Имя, Ссылочное", "Удаление",   Истина));
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульРаботаВМоделиСервисаПовтИсп = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервисаПовтИсп");
	МодельДанных = МодульРаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти();
	
	РазделенныеОбъектыМетаданных = Новый Соответствие();
	Для Каждого ЭлементМоделиДанных Из МодельДанных Цикл
		
		РазделенныеОбъектыМетаданных.Вставить(
			Метаданные.НайтиПоПолномуИмени(ЭлементМоделиДанных.Ключ), Истина);
		
	КонецЦикла;
	
	Для Каждого ОписаниеВида Из ВидыМетаданных Цикл // По видам метаданных.
		Для Каждого ОбъектМетаданных Из ОписаниеВида.Вид Цикл // По объектам вида.
			
			Если РазделенныеОбъектыМетаданных.Получить(ОбъектМетаданных) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Роль Из Метаданные.Роли Цикл
				
				Если Не ПравоДоступа("Чтение", ОбъектМетаданных, Роль) Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого ОписаниеПрава Из ПроверяемыеПрава Цикл
					Если НЕ ОписаниеПрава.Ссылочное
						ИЛИ ОписаниеВида.Ссылочный Тогда
						
						Если ПравоДоступа(ОписаниеПрава.Имя, ОбъектМетаданных, Роль) Тогда
							// Общая таблица объектов по ролям.
							СтрокаПрава = ОбщаяТаблица.Добавить();
							СтрокаПрава.Роль   = Роль.Имя;
							СтрокаПрава.Объект = ОбъектМетаданных.ПолноеИмя();
							СтрокаПрава.Право  = ОписаниеПрава.Имя;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбщаяТаблица.Индексы.Добавить("Роль");
	Возврат ОбщаяТаблица;
	
КонецФункции

Функция НедоступныеПраваПоТипамПользователей()
	
	НедоступныеПрава = Новый Соответствие;
	
	Права = Новый СписокЗначений;
	НедоступныеПрава.Вставить(Перечисления.ТипыПользователей.ВнешнийПользователь, Права);
	Права.Добавить("Администрирование",       НСтр("ru = 'Администрирование'"));
	Права.Добавить("АдминистрированиеДанных", НСтр("ru = 'Администрирование данных'"));
	
	Права = Новый СписокЗначений;
	НедоступныеПрава.Вставить(Перечисления.ТипыПользователей.ПользовательЛокальногоРешения, Права);
	Права.Добавить("Администрирование",                     НСтр("ru = 'Администрирование'"));
	Права.Добавить("ОбновлениеКонфигурацииБазыДанных",      НСтр("ru = 'Обновление конфигурации базы данных'"));
	
	Права = Новый СписокЗначений;
	НедоступныеПрава.Вставить(Перечисления.ТипыПользователей.ПользовательОбластиДанных, Права);
	Права.Добавить("Администрирование",                     НСтр("ru = 'Администрирование'"));
	Права.Добавить("ОбновлениеКонфигурацииБазыДанных",      НСтр("ru = 'Обновление конфигурации базы данных'"));
	Права.Добавить("ТолстыйКлиент",                         НСтр("ru = 'Толстый клиент'"));
	Права.Добавить("ВнешнееСоединение",                     НСтр("ru = 'Внешнее соединение'"));
	Права.Добавить("Automation",                            НСтр("ru = 'Automation'"));
	Права.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок", НСтр("ru = 'Интерактивное открытие внешних обработок'"));
	Права.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов",   НСтр("ru = 'Интерактивное открытие внешних отчетов'"));
	Права.Добавить("РежимВсеФункции",                       НСтр("ru = 'Режим все функции'"));
	
	Возврат НедоступныеПрава;
	
КонецФункции

Функция РазрешеноИзменениеОбщихДанных()
	
	Итог = Новый Соответствие;
	
	Итог.Вставить(Перечисления.ТипыПользователей.ВнешнийПользователь,           Истина);
	Итог.Вставить(Перечисления.ТипыПользователей.ПользовательЛокальногоРешения, Истина);
	Итог.Вставить(Перечисления.ТипыПользователей.ПользовательОбластиДанных,     Ложь);
	
	Возврат Итог;
	
КонецФункции

Функция ВсеРоли()
	
	Массив = Новый Массив;
	Соответствие = Новый Соответствие;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(256)));
	
	Для каждого Роль Из Метаданные.Роли Цикл
		ИмяРоли = Роль.Имя;
		
		Массив.Добавить(ИмяРоли);
		Соответствие.Вставить(ИмяРоли, Истина);
		Таблица.Добавить().Имя = ИмяРоли;
	КонецЦикла;
	
	ВсеРоли = Новый Структура;
	ВсеРоли.Вставить("Массив",       Новый ФиксированныйМассив(Массив));
	ВсеРоли.Вставить("Соответствие", Новый ФиксированноеСоответствие(Соответствие));
	ВсеРоли.Вставить("Таблица",      Таблица);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ВсеРоли, Ложь);
	
КонецФункции

#КонецОбласти

#КонецЕсли
